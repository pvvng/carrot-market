// npm i prisma
// npx prisma init

// npx prisma migrate dev
// -> 변경된 스키마를 기반으로 마이그레이션 생성
// -> 생성된 마이그레이션 파일을 데이터베이스에 적용
// -> npx prisma create 명령어도 함께 실행. 이 명령어로 Client 생성
// -> Generated Prisma Client (v6.3.1) to ./node_modules/@prisma/client

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// model -> db에 든 객체
// model schema 정의
model User {
  // @default(autoincrement()) -> 사용자 id 자동으로 증가시키기
  // 최초 사용자 id = 1
  id              Int           @id @default(autoincrement())
  username        String        @unique
  // 전화번호, 소셜 로그인 한 유저의 경우에는 email, pw가 정의되지 않을 수 있으므로 ? 사용
  email           String?       @unique
  password        String?
  phone           String?       @unique
  github_id       String?       @unique
  avatar          String?
  // now() -> 사용자가 생성되는 시간 반환 함수
  created_at      DateTime      @default(now())
  // 사용자 레코드가 수정된 시간을 속성에 넣기
  updated_at      DateTime      @updatedAt
  tokens          SMSToken[]
  products        Product[]     @relation("Seller_products") // 판매자의 제품
  boughtProducts  Product[]     @relation("Buyer_products") // 구매자의 제품
  posts           Post[]
  comments        Comment[]
  likes           Like[]
  chat_rooms      ChatRoom[]
  messages        Message[]
  MessageRead     MessageRead[]
  LiveStream      LiveStream[]
  reviewsGiven    Review[]      @relation("Review_buyer")
  reviewsReceived Review[]      @relation("Review_seller")
}

model SMSToken {
  id         Int      @id @default(autoincrement())
  token      String   @unique
  phone      String   @unique
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  // 아래 줄을 기입하는 이유는 
  // prisma에게 userId가 가지는 의미(사용자 아이디) userId를 어디서 찾아야하는지 이런걸 명시적으로 알려주기 위해서
  // SMSToken의 userId 필드는 User model의 id 필드를 참조한다는 의미
  // onDelete : Cascade -> User 삭제시 연계된 relation model 삭제
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     Int
  // 실제로 저장되는 값은 userId
  // userId를 바탕으로 User정보를 찾는것
}

model Product {
  id          Int        @id @default(autoincrement())
  title       String
  price       Float
  description String
  photo       String
  sold_out    Boolean    @default(false) // 판매여부
  created_at  DateTime   @default(now())
  updated_at  DateTime   @updatedAt
  user        User       @relation("Seller_products", fields: [userId], references: [id], onDelete: Cascade)
  buyerUser   User?      @relation("Buyer_products", fields: [buyerId], references: [id], onDelete: Cascade)
  userId      Int
  buyerId     Int?
  Review      Review[]
  ChatRoom    ChatRoom[]
}

model Post {
  id          Int       @id @default(autoincrement())
  title       String
  description String?
  views       Int       @default(0)
  created_at  DateTime  @default(now())
  updated_at  DateTime  @updatedAt
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      Int
  comments    Comment[]
  likes       Like[]
}

model Comment {
  id         Int      @id @default(autoincrement())
  payload    String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  post       Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  userId     Int
  postId     Int
}

model Like {
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  post       Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  userId     Int
  postId     Int

  // 한 사용자가 같은 게시물(Post)에 좋아요를 여러 번 누를 수 없도록 제한하기 위해서 복합 기본 키(Composite Primary Key)를 사용
  @@id(name: "id", [userId, postId])
}

model ChatRoom {
  id         String    @id @default(cuid())
  users      User[]
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  messages   Message[]
  product    Product   @relation(fields: [productId], references: [id])
  productId  Int
}

model Message {
  id         Int           @id @default(autoincrement())
  payload    String
  created_at DateTime      @default(now())
  updated_at DateTime      @updatedAt
  room       ChatRoom      @relation(fields: [chatRoomId], references: [id], onDelete: Cascade)
  user       User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  chatRoomId String
  userId     Int
  read       MessageRead[]
}

model MessageRead {
  id        Int      @id @default(autoincrement())
  read_at   DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  message   Message  @relation(fields: [messageId], references: [id], onDelete: Cascade)
  messageId Int
  userId    Int
}

model LiveStream {
  id         Int      @id @default(autoincrement())
  title      String
  stream_key String
  stream_id  String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     Int
}

// product id에 buyer가 존재할 수 있으니까 /review/[productId] 로 보내서 거기서 리뷰 작성하도록 ㄱㄱㄱ
model Review {
  rating     Int
  payload    String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  buyer      User     @relation("Review_buyer", fields: [buyerId], references: [id], onDelete: Cascade)
  seller     User     @relation("Review_seller", fields: [sellerId], references: [id], onDelete: Cascade)
  product    Product  @relation(fields: [productId], references: [id])
  buyerId    Int
  sellerId   Int
  productId  Int

  @@id([buyerId, sellerId, productId]) // 복합 키 설정
}
